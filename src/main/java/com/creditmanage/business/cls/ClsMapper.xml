<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.creditmanage.business.cls.ClsMapper">

    <parameterMap id="paramMap" type="com.creditmanage.business.cls.Cls"/>
    <resultMap id="resultMap" type="com.creditmanage.business.cls.Cls"/>

    <sql id="selectAll">
        select
            t1.id                                           as id,
            date_format(t1.created_at, '%Y-%m-%d %H:%i:%S') as createdAt,
            date_format(t1.updated_at, '%Y-%m-%d %H:%i:%S') as updatedAt,

            t1.grade                                        as grade,
            t1.cls                                          as cls,
            t1.teacher_id                                   as teacherId,

            t2.name                                         as teacherName,
            concat(t1.grade, '级', t1.cls, '班')              as fullName,


            (select sum(s1.score)
             from stu_score s1
                 left join user s2 on s1.student_id = s2.id
             where s2.class_id = t1.id
                   and s1.score <![CDATA[>]]> 0)                     as increaseScore,
            (select sum(s1.score)
             from stu_score s1
                 left join user s2 on s1.student_id = s2.id
             where s2.class_id = t1.id
                   and s1.score <![CDATA[<]]> 0)                     as decreaseScore
    </sql>
    <sql id="fromAll">
        from cls t1
        left join user t2 on (t1.teacher_id = t2.id)
    </sql>
    <sql id="whereAll">
        <foreach collection="query.filters" open="where 1=1 " item="item">
            ${item.getFilterSql()}
        </foreach>
    </sql>
    <sql id="orderAll">
        <!--<if test="query.orders.size()>0">-->
        <foreach collection="query.orders" open="order by" item="item" separator=",">
            ${item.field} ${item.orderVal()}
        </foreach>
        <!--</if>-->
    </sql>

    <select id="queryOne" resultMap="resultMap" parameterMap="paramMap">
        <include refid="selectAll"/>
        <include refid="fromAll"/>
        where t1.id = #{id}
    </select>

    <select id="queryAll" resultMap="resultMap" parameterMap="paramMap">
        select * from (
        <include refid="selectAll"/>
        <include refid="fromAll"/>
        ) as temp
        <include refid="whereAll"/>
        <include refid="orderAll"/>
    </select>

    <select id="queryPage" resultMap="resultMap" parameterMap="paramMap">
        select * from (
        <include refid="selectAll"/>
        <include refid="fromAll"/>
        ) as temp
        <include refid="whereAll"/>
        <include refid="orderAll"/>
        limit ${(query.page-1)*query.pageSize},${query.pageSize}
    </select>

    <select id="queryCount" resultType="java.lang.Integer" parameterMap="paramMap">
        select count(1) from (
        <include refid="selectAll"/>
        <include refid="fromAll"/>
        ) as temp
        <include refid="whereAll"/>
    </select>

    <insert id="insert" parameterMap="paramMap">
        insert into
            cls
            (id, created_at, updated_at, grade, cls, teacher_id)
            value
            (#{id}, now(), now(), #{grade}, #{cls}, #{teacherId})
    </insert>

    <update id="update" parameterMap="paramMap">
        update cls
        <set>
            updated_at = now(),
            <if test="grade !=null and grade !=''">grade = #{grade},</if>
            <if test="cls !=null and cls !=''">cls = #{cls},</if>
            <if test="teacherId !=null and teacherId !=''">teacher_id = #{teacherId},</if>
        </set>
        where id = #{id}
    </update>
    <delete id="delete" parameterMap="paramMap">
        delete from cls
        where id = #{id}
    </delete>

</mapper>