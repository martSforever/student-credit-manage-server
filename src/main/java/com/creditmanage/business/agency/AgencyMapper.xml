<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.creditmanage.business.agency.AgencyMapper">

    <parameterMap id="paramMap" type="com.creditmanage.business.agency.Agency"/>
    <resultMap id="resultMap" type="com.creditmanage.business.agency.Agency"/>

    <sql id="selectAll">
        select
            t1.id                                           as id,
            date_format(t1.created_at, '%Y-%m-%d %H:%i:%S') as createdAt,
            date_format(t1.updated_at, '%Y-%m-%d %H:%i:%S') as updatedAt,

            name                                            as name,
            type                                            as type,
            level                                           as level,
            charger_id                                       as chargerId,

            t2.acct_name                                    as chargerName
    </sql>
    <sql id="fromAll">
        from agency t1
        left join acct t2 on t1.chargerId = t2.id
    </sql>
    <sql id="whereAll">
        <foreach collection="query.filters" open="where 1=1 " item="item">
            ${item.getFilterSql()}
        </foreach>
    </sql>
    <sql id="orderAll">
        <!--<if test="query.orders.size()>0">-->
        <foreach collection="query.orders" open="order by" item="item" separator=",">
            ${item.field} ${item.orderVal()}
        </foreach>
        <!--</if>-->
    </sql>

    <select id="queryOne" resultMap="resultMap" parameterMap="paramMap">
        <include refid="selectAll"/>
        <include refid="fromAll"/>
        where t1.id = #{id}
    </select>

    <select id="queryAll" resultMap="resultMap" parameterMap="paramMap">
        select * from (
        <include refid="selectAll"/>
        <include refid="fromAll"/>
        ) as temp
        <include refid="whereAll"/>
        <include refid="orderAll"/>
    </select>

    <select id="queryPage" resultMap="resultMap" parameterMap="paramMap">
        select * from (
        <include refid="selectAll"/>
        <include refid="fromAll"/>
        ) as temp
        <include refid="whereAll"/>
        <include refid="orderAll"/>
        limit ${(query.page-1)*query.pageSize},${query.pageSize}
    </select>

    <select id="queryCount" resultType="java.lang.Integer" parameterMap="paramMap">
        select count(1) from (
        <include refid="selectAll"/>
        <include refid="fromAll"/>
        ) as temp
        <include refid="whereAll"/>
    </select>

    <insert id="insert" parameterMap="paramMap">
        insert into
            agency
            (id, created_at, updated_at, type, name, level, charger_id)
            value
            (#{id}, now(), now(), #{type}, #{name}, #{level}, #{chargerId})
    </insert>

    <update id="update" parameterMap="paramMap">
        update agency
        <set>
            updated_at = now(),
            <if test="type!=null and type!=''">type = #{type},</if>
            <if test="name!=null and name!=''">name = #{name},</if>
            <if test="level!=null and level!=''">level = #{level},</if>
            <if test="chargerId!=null and chargerId!=''">charger_id = #{chargerId},</if>
        </set>
        where id = #{id}
    </update>
    <delete id="delete" parameterMap="paramMap">
        delete from agency
        where id = #{id}
    </delete>

</mapper>