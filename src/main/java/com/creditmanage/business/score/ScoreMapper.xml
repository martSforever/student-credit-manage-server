<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.creditmanage.business.score.ScoreMapper">

    <parameterMap id="paramMap" type="com.creditmanage.business.score.Score"/>
    <resultMap id="resultMap" type="com.creditmanage.business.score.Score"/>

    <sql id="selectAll">
        select
            t1.id                                           as id,
            date_format(t1.created_at, '%Y-%m-%d %H:%i:%S') as createdAt,
            date_format(t1.updated_at, '%Y-%m-%d %H:%i:%S') as updatedAt,

            t1.course_id                                    as courseId,
            t1.student_id                                   as studentId,
            t1.comment                                      as comment,
            t1.type                                         as type,
            t1.score                                        as score,
            date_format(t1.check_time, '%Y-%m-%d %H:%i:%S') as checkTime,
            t1.check_teacher_id                             as checkTeacherId,

            t2.name                                         as courseName,
            t3.name                                         as studentName,
            t3.code                                         as studentCode,
            t3.tel                                          as studentTel,
            concat(t4.grade, '级', t4.cls, '班')              as studentClassName,
            t5.name                                         as studentTeacherName,
            t6.name                                         as courseTeacherName,
            t7.name                                         as checkTeacherName
    </sql>
    <sql id="fromAll">
        from stu_score t1
        left join course t2 on t1.course_id = t2.id
        left join user t3 on t1.student_id = t3.id
        left join cls t4 on t3.class_id = t4.id
        left join user t5 on t4.teacher_id = t5.id
        left join user t6 on t2.teacher_id = t6.id
        left join user t7 on t7.id = t1.check_teacher_id
    </sql>
    <sql id="whereAll">
        <foreach collection="query.filters" open="where 1=1 " item="item">
            ${item.getFilterSql()}
        </foreach>
    </sql>
    <sql id="orderAll">
        <!--<if test="query.orders.size()>0">-->
        <foreach collection="query.orders" open="order by" item="item" separator=",">
            ${item.field} ${item.orderVal()}
        </foreach>
        <!--</if>-->
    </sql>

    <select id="queryOne" resultMap="resultMap" parameterMap="paramMap">
        <include refid="selectAll"/>
        <include refid="fromAll"/>
        where t1.id = #{id}
    </select>

    <select id="queryAll" resultMap="resultMap" parameterMap="paramMap">
        select * from (
        <include refid="selectAll"/>
        <include refid="fromAll"/>
        ) as temp
        <include refid="whereAll"/>
        <include refid="orderAll"/>
    </select>

    <select id="queryPage" resultMap="resultMap" parameterMap="paramMap">
        select * from (
        <include refid="selectAll"/>
        <include refid="fromAll"/>
        ) as temp
        <include refid="whereAll"/>
        <include refid="orderAll"/>
        limit ${(query.page-1)*query.pageSize},${query.pageSize}
    </select>

    <select id="queryCount" resultType="java.lang.Integer" parameterMap="paramMap">
        select count(1) from (
        <include refid="selectAll"/>
        <include refid="fromAll"/>
        ) as temp
        <include refid="whereAll"/>
    </select>

    <insert id="insert" parameterMap="paramMap">
        insert into stu_score
        (id, created_at, updated_at, course_id, student_id, type, comment, score, check_time, check_teacher_id)
        values
            (#{id}, now(), now(), #{courseId}, #{studentId}, #{type}, #{comment}, #{score}, str_to_date(#{checkTime}, '%Y-%m-%d %H:%i:%S'), #{checkTeacherId})
    </insert>

    <update id="update" parameterMap="paramMap">
        update stu_score
        <set>
            updated_at = now(),
            <if test="courseId !=null and courseId !=''">course_id = #{courseId},</if>
            <if test="studentId !=null and studentId !=''">student_id = #{studentId},</if>
            <if test="type !=null and type !=''">type = #{type},</if>
            <if test="comment !=null and comment !=''">comment = #{comment},</if>
            <if test="score !=null and score !=''">score = #{score},</if>
            <if test="checkTime !=null and checkTime !=''">check_time = str_to_date(#{checkTime}, '%Y-%m-%d %H:%i:%S'),</if>
            <if test="checkTeacherId !=null and checkTeacherId !=''">check_teacher_id = #{checkTeacherId},</if>
        </set>
        where id = #{id}
    </update>
    <delete id="delete" parameterMap="paramMap">
        delete from stu_score
        where id = #{id}
    </delete>

</mapper>