<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.creditmanage.base.user.UserMapper">

    <parameterMap id="paramMap" type="com.creditmanage.base.user.User"/>
    <resultMap id="resultMap" type="com.creditmanage.base.user.User"/>

    <sql id="selectAll">
        select
            t1.id                                           as id,
            date_format(t1.created_at, '%Y-%m-%d %H:%i:%S') as createdAt,
            date_format(t1.updated_at, '%Y-%m-%d %H:%i:%S') as updatedAt,
            t1.username                                     as username,
            t1.password                                     as password,
            t1.code                                         as code,
            t1.role                                         as role,
            t1.tel                                          as tel,
            t1.email                                        as email,
            t1.name                                         as name,
            t1.class_id                                     as classId,
            concat(t2.grade, '级', t2.cls, '班')              as className,

            t3.id                                           as classTeacherId,
            t3.name                                         as classTeacherName,

            (select sum(s1.score)
            from stu_score s1
            where s1.student_id = t1.id and s1.score <![CDATA[>]]> 0)  as increaseScore,
            (select sum(s2.score)
            from stu_score s2
            where s2.student_id = t1.id and s2.score <![CDATA[<]]> 0)  as decreaseScore
    </sql>
    <sql id="fromAll">
        from user t1
        left join cls t2 on t1.class_id = t2.id
        left join user t3 on t2.teacher_id = t3.id
    </sql>
    <sql id="whereAll">
        <foreach collection="query.filters" open="where 1=1 " item="item">
            ${item.getFilterSql()}
        </foreach>

        <if test="queryType != null and queryType == 'queryForCourse'">
            and id not in (
            select s1.user_id from inter_user_course s1 where s1.course_id = #{queryValue}
            )
        </if>
    </sql>
    <sql id="orderAll">
        <!--<if test="query.orders.size()>0">-->
        <foreach collection="query.orders" open="order by" item="item" separator=",">
            ${item.field} ${item.orderVal()}
        </foreach>
        <!--</if>-->
    </sql>

    <select id="queryOne" resultMap="resultMap" parameterMap="paramMap">
        <include refid="selectAll"/>
        <include refid="fromAll"/>
        where t1.id = #{id}
    </select>

    <select id="queryAll" resultMap="resultMap" parameterMap="paramMap">
        select * from (
        <include refid="selectAll"/>
        <include refid="fromAll"/>
        ) as temp
        <include refid="whereAll"/>
        <include refid="orderAll"/>
    </select>

    <select id="queryPage" resultMap="resultMap" parameterMap="paramMap">
        select * from (
        <include refid="selectAll"/>
        <include refid="fromAll"/>
        ) as temp
        <include refid="whereAll"/>
        <include refid="orderAll"/>
        limit ${(query.page-1)*query.pageSize},${query.pageSize}
    </select>

    <select id="queryCount" resultType="java.lang.Integer" parameterMap="paramMap">
        select count(1) from (
        <include refid="selectAll"/>
        <include refid="fromAll"/>
        ) as temp
        <include refid="whereAll"/>
    </select>

    <insert id="insert" parameterMap="paramMap">
        insert into
            user
            (id, created_at, updated_at, code, role, username, password, tel, email, class_id, name)
        values
            (#{id}, now(), now(), #{code}, #{role}, #{username}, #{password}, #{tel}, #{email}, #{classId}, #{name})
    </insert>

    <update id="update" parameterMap="paramMap">
        update user
        <set>
            updated_at = now(),
            <if test="code !=null and code !=''">code = #{code},</if>
            <if test="role !=null and role !=''">role = #{role},</if>
            <if test="username !=null and username !=''">username = #{username},</if>
            <if test="password !=null and password !=''">password = #{password},</if>
            <if test="tel !=null and tel !=''">tel = #{tel},</if>
            <if test="email !=null and email !=''">email = #{email},</if>
            <if test="classId !=null and classId !=''">class_id = #{classId},</if>
            <if test="name !=null and name !=''">name = #{name},</if>
        </set>
        where id = #{id}
    </update>
    <delete id="delete" parameterMap="paramMap">
        delete from user
        where id = #{id}
    </delete>

</mapper>